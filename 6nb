import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import confusion_matrix, classification_report

msg = pd.read_csv('6CSV.csv', names=['message', 'label'])

msg['labelnum'] = msg.label.map({'pos': 1, 'neg': 0})
x = msg.message
y = msg.labelnum

print("The message and its label for the first 5 instances are listed below:")
x5 = x[0:5]
y5 = y[0:5]
for message, label in zip(x5, y5):
    print(message, "", label)

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2)

print("Dataset is split into training and test samples")
print("Total training instances:", xtrain.shape[0])
print("Total test instances:", xtest.shape[0])

count_vect = CountVectorizer()
xtrain_dtm = count_vect.fit_transform(xtrain)
xtest_dtm = count_vect.transform(xtest)
print("\nTotal features extracted using count vectorizer:", xtrain_dtm.shape[1])
print("\nFeatures for the first 5 instances are listed below:")

df = pd.DataFrame(xtrain_dtm.toarray(), columns=count_vect.get_feature_names_out())
print(df.head())

clf = MultinomialNB().fit(xtrain_dtm, ytrain)
predicted = clf.predict(xtest_dtm)

print("\nClassification results of testing samples are given below")
for doc, p in zip(xtest, predicted):
    pred = 'pos' if p == 1 else 'neg'
    print(f"{doc} -> {pred}")

print('Confusion matrix')
print(confusion_matrix(ytest, predicted))
print('Classification report')
print(classification_report(ytest, predicted))
