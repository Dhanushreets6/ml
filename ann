import numpy as np

# Initialize input (X) and output (Y) arrays
X = np.array([[2, 9], [1, 5], [3, 6]], dtype=float)
Y = np.array([[92], [86], [89]], dtype=float)

# Normalize the input and output
X = X / np.amax(X, axis=0)
Y = Y / 100

# Define sigmoid and its gradient functions
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_grad(x):
    return x * (1 - x)

# Set hyperparameters
epoch = 10000
eta = 0.4
input_neurons = 2
hidden_neurons = 3
output_neurons = 1

# Initialize weights and biases
wh = np.random.uniform(size=(input_neurons, hidden_neurons))
bh = np.random.uniform(size=(1, hidden_neurons))
wout = np.random.uniform(size=(hidden_neurons, output_neurons))
bout = np.random.uniform(size=(1, output_neurons))

# Training process
for i in range(epoch):
    # Forward propagation
    h_ip = np.dot(X, wh) + bh
    h_act = sigmoid(h_ip)
    o_ip = np.dot(h_act, wout) + bout
    output = sigmoid(o_ip)

    # Backpropagation
    Eo = Y - output
    outgrad = sigmoid_grad(output)
    d_output = Eo * outgrad

    Eh = d_output.dot(wout.T)
    hiddengrad = sigmoid_grad(h_act)
    d_hidden = Eh * hiddengrad

    wout += h_act.T.dot(d_output) * eta
    wh += X.T.dot(d_hidden) * eta

    bout += np.sum(d_output, axis=0, keepdims=True) * eta
    bh += np.sum(d_hidden, axis=0, keepdims=True) * eta

# Print results
print("Normalized Input:\n" + str(X))
print("Actual Output:\n" + str(Y))
print("Predicted Output:\n" + str(output))
